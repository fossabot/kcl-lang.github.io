"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9232],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i="Data Integration",c={unversionedId:"user_docs/guides/data-integration/index",id:"user_docs/guides/data-integration/index",title:"Data Integration",description:"In KCL, we can not only compile and output the configuration code written by KCL into YAML format data, but also directly embed JSON/YAML and other data into the KCL language. For example, for the following KCL code (main.k):",source:"@site/docs/user_docs/guides/data-integration/index.md",sourceDirName:"user_docs/guides/data-integration",slug:"/user_docs/guides/data-integration/",permalink:"/docs/user_docs/guides/data-integration/",editUrl:"https://github.com/KusionStack/kcl-lang.io/blob/main/docs/user_docs/guides/data-integration/index.md",tags:[],version:"current",lastUpdatedBy:"Peefy",lastUpdatedAt:1670507794,formattedLastUpdatedAt:"12/8/2022",frontMatter:{},sidebar:"user_docs",previous:{title:"Schema Definition",permalink:"/docs/user_docs/guides/schema-definition/"},next:{title:"Automation",permalink:"/docs/user_docs/guides/automation/"}},l={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"data-integration"},"Data Integration"),(0,a.kt)("p",null,"In KCL, we can not only compile and output the configuration code written by KCL into YAML format data, but also directly embed JSON/YAML and other data into the KCL language. For example, for the following KCL code (main.k):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import yaml\n\nschema Server:\n    ports: [int]\n\nserver: Server = yaml.decode("""\\\nports:\n- 80\n- 8080\n""")\n')),(0,a.kt)("p",null,"In the above code, we use the built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"yaml")," module of KCL and its ",(0,a.kt)("inlineCode",{parentName:"p"},"yaml.decode")," function directly integrates YAML data, and uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"Server")," schema to directly verify the integrated YAML data. We can obtain the configuration output through the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmd"},"$ kcl main.k\nserver:\n  ports:\n  - 80\n  - 8080\n")),(0,a.kt)("p",null,"In addition, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"yaml.encode")," to serialize YAML data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kcl"},"import yaml\n\nserver = yaml.encode({\n    ports = [80, 8080]\n})\n")),(0,a.kt)("p",null,"The output of the execution command is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmd"},"$ kcl main.k\nserver: |\n  ports:\n  - 80\n  - 8080\n")),(0,a.kt)("p",null,"Similarly, for JSON data, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"json.encode")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"json.decode")," function performs data integration in the same way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kcl"},"import json\n\nserver_json_encode = json.encode({\n    ports = [80, 8080]\n})\nserver_json_decode = json.decode('{\"ports\": [80, 8080]}')\n")),(0,a.kt)("p",null,"The output of the execution command is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmd"},"$ kcl main.k\nserver_json_encode: '{\"ports\": [80, 8080]}'\nserver_json_decode:\n  ports:\n  - 80\n  - 8080\n")))}u.isMDXComponent=!0}}]);