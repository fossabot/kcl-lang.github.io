"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12128],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),k=a,m=d["".concat(l,".").concat(k)]||d[k]||p[k]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28091:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={},i="KPT KCL SDK",s={unversionedId:"user_docs/guides/working-with-k8s/kpt_kcl_sdk",id:"version-0.4.6/user_docs/guides/working-with-k8s/kpt_kcl_sdk",title:"KPT KCL SDK",description:"kpt is a package-centric toolchain that enables a configuration authoring, automation, and delivery experience, which simplifies managing Kubernetes platforms and KRM-driven infrastructure (e.g., Config Connector, Crossplane) at scale by manipulating declarative Configuration as Data for automating Kubernetes configuration editing including transforming and validating.",source:"@site/versioned_docs/version-0.4.6/user_docs/guides/working-with-k8s/kpt_kcl_sdk.md",sourceDirName:"user_docs/guides/working-with-k8s",slug:"/user_docs/guides/working-with-k8s/kpt_kcl_sdk",permalink:"/docs/user_docs/guides/working-with-k8s/kpt_kcl_sdk",draft:!1,editUrl:"https://github.com/KusionStack/kcl-lang.io/tree/main/versioned_docs/version-0.4.6/user_docs/guides/working-with-k8s/kpt_kcl_sdk.md",tags:[],version:"0.4.6",lastUpdatedBy:"Peefy",lastUpdatedAt:1681134212,formattedLastUpdatedAt:"Apr 10, 2023",frontMatter:{},sidebar:"user_docs",previous:{title:"Helm KCL Plugin",permalink:"/docs/user_docs/guides/working-with-k8s/helm_kcl_plugin"},next:{title:"Kustomize KCL Plugin",permalink:"/docs/user_docs/guides/working-with-k8s/kustomize_kcl_plugin"}},l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Get the Example",id:"get-the-example",level:2},{value:"Show the KRM",id:"show-the-krm",level:2},{value:"Update the <code>FunctionConfig</code>",id:"update-the-functionconfig",level:2},{value:"Test and Run",id:"test-and-run",level:2},{value:"More Documents and Examples",id:"more-documents-and-examples",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"kpt-kcl-sdk"},"KPT KCL SDK"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/GoogleContainerTools/kpt"},"kpt")," is a package-centric toolchain that enables a configuration authoring, automation, and delivery experience, which simplifies managing Kubernetes platforms and KRM-driven infrastructure (e.g., Config Connector, Crossplane) at scale by manipulating declarative Configuration as Data for automating Kubernetes configuration editing including transforming and validating."),(0,a.kt)("p",null,"KCL can be used to create functions to transform and/or validate the YAML Kubernetes Resource Model (KRM) input/output format, but we provide KPT KCL SDKs to simplify the function authoring process."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/GoogleContainerTools/kpt"},"kpt")),(0,a.kt)("li",{parentName:"ul"},"Install Docker")),(0,a.kt)("h2",{id:"quick-start"},"Quick Start"),(0,a.kt)("p",null,"Let\u2019s write a KCL function which add annotation ",(0,a.kt)("inlineCode",{parentName:"p"},"managed-by=kpt")," only to Deployment resources."),(0,a.kt)("h2",{id:"get-the-example"},"Get the Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/KusionStack/kpt-kcl-sdk.git/\ncd ./kpt-kcl-sdk/get-started/set-annotation\n")),(0,a.kt)("h2",{id:"show-the-krm"},"Show the KRM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kpt pkg tree\n")),(0,a.kt)("p",null,"The output is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"set-annotation\n\u251c\u2500\u2500 [kcl-fn-config.yaml]  KCLRun set-annotation\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 [resources.yaml]  Deployment nginx-deployment\n    \u2514\u2500\u2500 [resources.yaml]  Service test\n")),(0,a.kt)("h2",{id:"update-the-functionconfig"},"Update the ",(0,a.kt)("inlineCode",{parentName:"h2"},"FunctionConfig")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# kcl-fn-config.yaml\napiVersion: fn.kpt.dev/v1alpha1\nkind: KCLRun\nmetadata: # kpt-merge: /set-annotation\n  name: set-annotation\n# EDIT THE SOURCE!\n# This should be your KCL code which preloads the `ResourceList` to `option("resource_list")\nsource: |\n  [resource | {if resource.kind == "Deployment": metadata.annotations: {"managed-by" = "kpt"}} for resource in option("resource_list").items]\n')),(0,a.kt)("h2",{id:"test-and-run"},"Test and Run"),(0,a.kt)("p",null,"Run the KCL code via kpt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Note: you need add sudo and --as-current-user flags to ensure KCL has permission to write temp files in the container filesystem.\nsudo kpt fn eval ./data -i docker.io/peefyxpf/kcl-kpt:unstable --as-current-user --fn-config kcl-fn-config.yaml\n\n# Verify that the annotation is added to the `Deployment` resource and the other resource `Service` \n# does not have this annotation.\ncat ./data/resources.yaml | grep annotations -A1 -B5\n")),(0,a.kt)("h2",{id:"more-documents-and-examples"},"More Documents and Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/KusionStack/kpt-kcl-sdk"},"KPT KCL SDK"))))}p.isMDXComponent=!0}}]);