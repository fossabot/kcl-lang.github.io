"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[27472],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>h});var r=o(67294);function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){l(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,l=function(e,t){if(null==e)return{};var o,r,l={},n=Object.keys(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||(l[o]=e[o]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}var u=r.createContext({}),s=function(e){var t=r.useContext(u),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},d=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,l=e.mdxType,n=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(o),m=l,h=c["".concat(u,".").concat(m)]||c[m]||p[m]||n;return o?r.createElement(h,a(a({ref:t},d),{},{components:o})):r.createElement(h,a({ref:t},d))}));function h(e,t){var o=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=o.length,a=new Array(n);a[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:l,a[1]=i;for(var s=2;s<n;s++)a[s]=o[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},73684:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>n,metadata:()=>i,toc:()=>s});var r=o(87462),l=(o(67294),o(3905));const n={title:"Publish Kubernetes Modules",sidebar_position:4},a=void 0,i={unversionedId:"user_docs/guides/working-with-k8s/publish-modules",id:"user_docs/guides/working-with-k8s/publish-modules",title:"Publish Kubernetes Modules",description:"Introduction",source:"@site/docs/user_docs/guides/working-with-k8s/4-publish-modules.md",sourceDirName:"user_docs/guides/working-with-k8s",slug:"/user_docs/guides/working-with-k8s/publish-modules",permalink:"/docs/next/user_docs/guides/working-with-k8s/publish-modules",draft:!1,editUrl:"https://github.com/kcl-lang/kcl-lang.io/tree/main/docs/user_docs/guides/working-with-k8s/4-publish-modules.md",tags:[],version:"current",lastUpdatedBy:"Peefy",lastUpdatedAt:1699846715,formattedLastUpdatedAt:"Nov 13, 2023",sidebarPosition:4,frontMatter:{title:"Publish Kubernetes Modules",sidebar_position:4},sidebar:"user_docs",previous:{title:"KCL Operator",permalink:"/docs/next/user_docs/guides/working-with-k8s/mutate-manifests/kcl-operator"},next:{title:"Overview",permalink:"/docs/next/user_docs/guides/working-with-konfig/overview"}},u={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Publish KCL module by PR",id:"publish-kcl-module-by-pr",level:3},{value:"1. Fork and Clone the code repository",id:"1-fork-and-clone-the-code-repository",level:4},{value:"2. Create a branch for your module",id:"2-create-a-branch-for-your-module",level:4},{value:"3. Add your KCL module",id:"3-add-your-kcl-module",level:4},{value:"4. Commit your module",id:"4-commit-your-module",level:4},{value:"5. Submit a PR",id:"5-submit-a-pr",level:4}],d={toc:s},c="wrapper";function p(e){let{components:t,...o}=e;return(0,l.kt)(c,(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"The community KCL module registry is located at ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/search?org=kcl&sort=relevance&page=1"},"Artifact Hub")," and welcomes participation at the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/artifacthub"},"GitHub repository")," using pull requests. This section explains how to publish Kubernetes modules and work with the module registry."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: If you want to publish your KCL modules to the ",(0,l.kt)("inlineCode",{parentName:"p"},"kcl-lang")," official registry, then the source code of your KCL modules will be saved in this repo, you need to submit the source code of your module to this repository via PRs. But KCL also makes it possible to create and run your own kcl module registry such as OCI registries e.g., Docker Hub, Github Packages and Harbor, etc.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: The KCL module does not limit your configuration or policy code content. It can be a workload configuration for applications like Helm Chart, or it can be a Kubernetes validation code or a general code library. However, we strongly recommend that you provide a brief introduction and usage of a kcl module in the documentation.")),(0,l.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Install ",(0,l.kt)("a",{parentName:"li",href:"https://kcl-lang.io/docs/user_docs/getting-started/install/"},"kcl"))),(0,l.kt)("h2",{id:"quick-start"},"Quick Start"),(0,l.kt)("h3",{id:"publish-kcl-module-by-pr"},"Publish KCL module by PR"),(0,l.kt)("h4",{id:"1-fork-and-clone-the-code-repository"},"1. Fork and Clone the code repository"),(0,l.kt)("p",null,"First, you need to clone the repository"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/{your_github_id}/artifacthub --depth=1\n")),(0,l.kt)("h4",{id:"2-create-a-branch-for-your-module"},"2. Create a branch for your module"),(0,l.kt)("p",null,"We recommend that your branch name be: ",(0,l.kt)("inlineCode",{parentName:"p"},"publish-pkg-<pkg_name>"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"<pkg_name>")," is the name of your module."),(0,l.kt)("p",null,"Take the module ",(0,l.kt)("inlineCode",{parentName:"p"},"helloworld")," as an example"),(0,l.kt)("p",null,"Enter the artifacthub directory you downloaded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd artifacthub\n")),(0,l.kt)("p",null,"Create a branch ",(0,l.kt)("inlineCode",{parentName:"p"},"publish-pkg-helloworld")," for the module ",(0,l.kt)("inlineCode",{parentName:"p"},"helloworld")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git checkout -b publish-pkg-helloworld\n")),(0,l.kt)("h4",{id:"3-add-your-kcl-module"},"3. Add your KCL module"),(0,l.kt)("p",null,"You need to move your module to the current directory. In our example, we use the ",(0,l.kt)("inlineCode",{parentName:"p"},"kcl mod init")," command to create the module ",(0,l.kt)("inlineCode",{parentName:"p"},"helloworld")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl mod init helloworld\n")),(0,l.kt)("p",null,"You can add a ",(0,l.kt)("inlineCode",{parentName:"p"},"README.md")," file to the root directory of the module to display on the homepage of AH."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'echo "## Introduction" >> helloworld/README.md\necho "This is a kcl module named helloworld." >> helloworld/README.md\n')),(0,l.kt)("p",null,"Generate reference documents for your module (optional)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl doc generate\n")),(0,l.kt)("h4",{id:"4-commit-your-module"},"4. Commit your module"),(0,l.kt)("p",null,"You can use the following command to commit your module"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"git add .")," command to add your module to the staging area of git"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git add .\n")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"git commit -s"),' command to commit your module, we recommend that your commit message follow the format "publish module <pkg_name>".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'git commit -m "publish module helloworld" -s\n')),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"git push")," command to submit your module to your branch ",(0,l.kt)("inlineCode",{parentName:"p"},"publish-pkg-<pkg_name>")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git push\n")),(0,l.kt)("h4",{id:"5-submit-a-pr"},"5. Submit a PR"),(0,l.kt)("p",null,"Finally, you need to submit a PR to the main branch of the repository with your branch ",(0,l.kt)("inlineCode",{parentName:"p"},"publish-pkg-<pkg_name>"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request"},"How to create PR"))))}p.isMDXComponent=!0}}]);