<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kcl-lang.github.io/blog</id>
    <title>KCL programming language. Blog</title>
    <updated>2022-12-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kcl-lang.github.io/blog"/>
    <subtitle>KCL programming language. Blog</subtitle>
    <icon>https://kcl-lang.github.io/img/kcl-logo.jpg</icon>
    <entry>
        <title type="html"><![CDATA[KCL Introduction on OSDT 2022 Meeting]]></title>
        <id>2022-kcl-osdt-meeting</id>
        <link href="https://kcl-lang.github.io/blog/2022-kcl-osdt-meeting"/>
        <updated>2022-12-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Download PDF]]></summary>
        <content type="html"><![CDATA[<p><a href="https://kcl-lang.github.io/talks/kcl-osdt2022.pdf" target="_blank" rel="noopener noreferrer">Download PDF</a></p>]]></content>
        <author>
            <name>Pengfei, Xu</name>
        </author>
        <category label="KCL" term="KCL"/>
        <category label="Configuration" term="Configuration"/>
        <category label="Policy" term="Policy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[KCL v0.4.4 Release Blog]]></title>
        <id>2022-kcl-0.4.4-release-blog</id>
        <link href="https://kcl-lang.github.io/blog/2022-kcl-0.4.4-release-blog"/>
        <updated>2022-12-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The KCL team is pleased to announce that v0.4.4 is now available! This release mainly adds the ability to customize YAML manifests output for KCL. Users can customize the style of YAML output by writing code and calling system functions without understanding the complex schema settings semantics. In addition, this release provides the latest KCL Python SDK, which can be used for Python users to directly integrate KCL. At the same time, we have greatly reduced the size of the KCL installation package. The average installation package size has been reduced to one-fifth of that of the previous version. It also includes a number of compiler error message optimization and bug fix. You can visit the KCL release page to get more detailed release information and KCL binary download link.]]></summary>
        <content type="html"><![CDATA[<p>The KCL team is pleased to announce that v0.4.4 is now available! This release mainly adds the ability to customize YAML manifests output for KCL. Users can customize the style of YAML output by writing code and calling system functions without understanding the complex schema settings semantics. In addition, this release provides the latest <a href="https://github.com/KusionStack/kclvm-py" target="_blank" rel="noopener noreferrer">KCL Python SDK</a>, which can be used for Python users to directly integrate KCL. At the same time, we have greatly reduced the size of the KCL installation package. The average installation package size has been reduced to one-fifth of that of the previous version. It also includes a number of compiler error message optimization and bug fix. You can visit the <a href="https://github.com/KusionStack/KCLVM/releases/tag/v0.4.4-alpha.2" target="_blank" rel="noopener noreferrer">KCL release page</a> to get more detailed release information and KCL binary download link.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="background">Background<a class="hash-link" href="#background" title="Direct link to heading">​</a></h2><p>KCL is an open-source constraint-based record and functional language. KCL improves the writing of a large number of complex configurations through mature programming language technology and practice, and is committed to building better modularity, scalability and stability around configuration, simpler logic writing, fast automation and good ecological extensionality.</p><p>This blog will introduce the recent developments of KCL community to readers.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="features">Features<a class="hash-link" href="#features" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="customize-yaml-manifest-output">Customize YAML Manifest Output<a class="hash-link" href="#customize-yaml-manifest-output" title="Direct link to heading">​</a></h3><p>In previous KCL versions, the style of YAML output is hard coded in the KCL compiler, and users can set the <code>__settings__</code> meta attribute with different values to determine the YAML output style, which brings high complexity. Therefore, in version 0.4.4, we provide a system module function for developers to easily customize the YAML output style. The signature of this function is as follows:</p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">manifests</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">yaml_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> opts</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sort_keys </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ignore_private </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ignore_none </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sep </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"---"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>This function is used to serialize the KCL object list into YAML output with the <code>---</code> separator. It has two parameters:</p><ul><li><code>values</code> - A list of KCL objects</li><li><code>opts</code> - The YAML serialization options<ul><li><code>sort_keys</code>: Whether to sort the serialized results in the dictionary order of attribute names (the default is <code>False</code>).</li><li><code>ignore_private</code>: Whether to ignore the attribute output whose name starts with the character <code>_</code> (the default value is <code>True</code>).</li><li><code>ignore_none</code>: Whether to ignore the attribute with the value of' None '(the default value is <code>False</code>).</li><li><code>sep</code>: Set the separator between multiple YAML documents (the default value is <code>"---"</code>).</li></ul></li></ul><p>Here's an example:</p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> manifests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Deployment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"v1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Deployment"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"deploy"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        replica </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Service</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"v1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Service"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"svc"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">deployments </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Deployment </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Deployment </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">services </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Service </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Service </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manifests</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">yaml_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">deployments </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> services</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>First, we use the <code>import</code> keyword to import the <code>manifests</code> module and define two deployment resources and two service resources. When we want to output these four resources in YAML stream format with <code>---</code> as the separator, we can put them into a KCL list and use the <code>manifests.yaml_stream</code> function pass it to the <code>values</code> parameter (if there is no special requirement, the <code>opts</code> parameter can generally use the default value). Finally, the YAML output is:</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deployment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> deploy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">replica</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deployment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> deploy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">replica</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> svc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> svc</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><blockquote><p>Note: The feature of schema <code>__settings__</code> meta attribute setting YAML output style can still be used in v0.4.4. We will remove this feature in KCL v0.4.6 after the next two minor versions are released.</p></blockquote><p>For more information, see <a href="https://github.com/KusionStack/KCLVM/issues/94" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/KCLVM/issues/94</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="python-sdk">Python SDK<a class="hash-link" href="#python-sdk" title="Direct link to heading">​</a></h3><p>In addition to the existing <a href="https://github.com/KusionStack/kclvm-go" target="_blank" rel="noopener noreferrer">KCL Go SDK</a>, this release also adds the KCL Python SDK. Using the Python SDK requires that you have a local Python version higher than 3.7.3 and a local pip package management tool. You can use the following command to install and obtain helpful information.</p><div class="codeBlockContainer_I0IT language-cmd theme-code-block"><div class="codeBlockContent_wNvx cmd"><pre tabindex="0" class="prism-code language-cmd codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ python3 -m pip install kclvm &amp;&amp; python3 -m kclvm --help</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h4 class="anchor anchorWithStickyNavbar_mojV" id="command-line-tool">Command Line Tool<a class="hash-link" href="#command-line-tool" title="Direct link to heading">​</a></h4><p>Prepare a KCL file named <code>main.k</code></p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"kcl"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">age </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Person</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"kcl"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    age</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Person </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Person </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    age </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">101</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Execute the following command and get the output:</p><div class="codeBlockContainer_I0IT language-cmd theme-code-block"><div class="codeBlockContent_wNvx cmd"><pre tabindex="0" class="prism-code language-cmd codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ python3 -m kclvm hello.k</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name: kcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">age: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x0:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: kcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  age: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x1:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: kcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  age: 101</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h4 class="anchor anchorWithStickyNavbar_mojV" id="api">API<a class="hash-link" href="#api" title="Direct link to heading">​</a></h4><p>In addition, we can also execute KCL files through Python code.</p><p>Prepare a KCL file named <code>main.py</code></p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> kclvm</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">program</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">exec</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> kclvm_exec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> kclvm</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vm</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">planner </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> planner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">planner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">plan</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kclvm_exec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"hello.k"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">filter_by_path_selector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Execute the following command and get the output:</p><div class="codeBlockContainer_I0IT language-cmd theme-code-block"><div class="codeBlockContent_wNvx cmd"><pre tabindex="0" class="prism-code language-cmd codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ python3 main.py</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name: kcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">age: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x0:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: kcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  age: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x1:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: kcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  age: 101</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can see that the same output can be obtained through command line tools and APIs.</p><p>At present, the KCL Python SDK is still in the early preview version. The KCL team will continue to update and provide more functions in the future. For more information, see <a href="https://github.com/KusionStack/kclvm-py" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/kclvm-py</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="installation-size-optimization">Installation Size Optimization<a class="hash-link" href="#installation-size-optimization" title="Direct link to heading">​</a></h2><p>In the new KCL version, we split the built-in Python 3 of KCL, reducing the average size of the KCL binary compression package from 200M to 35M. Users can download and use KCL faster, and the Python plugin becomes an option. If you want to enable the KCL Python plugin, an additional requirement is that you have Python and pip package management tools that are higher than 3.7.3. For more details, please see <a href="https://github.com/KusionStack/kcl-plugin" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/kcl-plugin</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="bugfix">Bugfix<a class="hash-link" href="#bugfix" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="function-call-error-information-optimization">Function Call Error Information Optimization<a class="hash-link" href="#function-call-error-information-optimization" title="Direct link to heading">​</a></h3><p>In version 0.4.4, KCL optimizes the output of error messages when the number of function arguments does not match, and supports the display of function names and the number of argument mismatches</p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">schema Foo</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bar?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">f </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">lambda</span><span class="token plain"> x </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">foo </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Error: "Foo" takes 1 positional argument but 3 were given</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Error: "f" takes 1 positional argument but 2 were given</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>For more information, see <a href="https://github.com/KusionStack/KCLVM/issues/299" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/KCLVM/issues/299</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="formatting-error-of-interpolated-three-quote-string">Formatting Error of Interpolated Three Quote String<a class="hash-link" href="#formatting-error-of-interpolated-three-quote-string" title="Direct link to heading">​</a></h3><p>In previous KCL versions, formatting the following code would incorrectly convert the three quotation marks with string interpolation into single quotation marks and cause compilation errors. In version 0.4.4, we fixed the issue.</p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># Before KCL v0.4.4, variable "bar" will be formatted as:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># foo = 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># bar = "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># ${foo}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">foo </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bar </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">${foo}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>For more information, see <a href="https://github.com/KusionStack/KCLVM/issues/294" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/KCLVM/issues/294</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="other-issues">Other Issues<a class="hash-link" href="#other-issues" title="Direct link to heading">​</a></h3><p>For more issues, see <a href="https://github.com/KusionStack/KCLVM/milestone/2?closed=1" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/KCLVM/milestone/2?closed=1</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documents">Documents<a class="hash-link" href="#documents" title="Direct link to heading">​</a></h2><p><a href="https://kcl-lang.github.io/" target="_blank" rel="noopener noreferrer">KCL website</a> preliminary establishment and improvement of Kubernetes scenarios <a href="https://kcl-lang.github.io/docs/user_docs/guides/working-with-k8s/" target="_blank" rel="noopener noreferrer">related documents</a>.</p><p>For more information, see <a href="https://kcl-lang.github.io/" target="_blank" rel="noopener noreferrer">https://kcl-lang.github.io/</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="community">Community<a class="hash-link" href="#community" title="Direct link to heading">​</a></h2><p>Three external contributors @my-vegetable-has-exploded, @possible-fqz, @orangebees have participated in the KCL community, thank them for their enthusiasm and active participation in contributing.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="next">Next<a class="hash-link" href="#next" title="Direct link to heading">​</a></h2><p>It is estimated that by the end of January 2023, we will release KCL v0.4.5, and the key evolution is expected to include</p><ul><li>Continuous optimization of the KCL user interface, improvement of experience and user pain points.</li><li>More scenarios and ecology integration, such as Kubernetes and CI/CD Pipeline scenarios.</li><li>KCL Windows version support.</li><li>KCL package management tool <code>kpm</code> release.</li><li>The new version of KCL playground.</li></ul><p>For more information, see <a href="https://github.com/KusionStack/KCLVM/milestone/3" target="_blank" rel="noopener noreferrer">KCL v0.4.5 Milestone</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="faq">FAQ<a class="hash-link" href="#faq" title="Direct link to heading">​</a></h2><p>For more information, see <a href="https://kcl-lang.github.io/docs/user_docs/support/" target="_blank" rel="noopener noreferrer">https://kcl-lang.github.io/docs/user_docs/support/</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="additional-resources">Additional Resources<a class="hash-link" href="#additional-resources" title="Direct link to heading">​</a></h2><ul><li><a href="https://kcl-lang.github.io/" target="_blank" rel="noopener noreferrer">KCL Website</a></li><li><a href="https://kusionstack.io/" target="_blank" rel="noopener noreferrer">Kusion Website</a></li><li><a href="https://github.com/KusionStack/KCLVM" target="_blank" rel="noopener noreferrer">KCL Repo</a></li><li><a href="https://github.com/KusionStack/kusion" target="_blank" rel="noopener noreferrer">Kusion Repo</a></li><li><a href="https://github.com/KusionStack/konfig" target="_blank" rel="noopener noreferrer">Konfig Repo</a></li></ul><p>See the <a href="https://github.com/KusionStack/community" target="_blank" rel="noopener noreferrer">community</a> for ways to join us. 👏👏👏</p>]]></content>
        <author>
            <name>KCL Team</name>
        </author>
        <category label="Release Blog" term="Release Blog"/>
        <category label="KCL" term="KCL"/>
        <category label="KusionStack" term="KusionStack"/>
        <category label="Kusion" term="Kusion"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[40x Faster! We rewrote our project with Rust]]></title>
        <id>2022-kcl-rewrite-with-rust</id>
        <link href="https://kcl-lang.github.io/blog/2022-kcl-rewrite-with-rust"/>
        <updated>2022-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p>Rust has quietly become one of the most popular programming languages. As an emerging system language, Rust has many characteristics, such as the memory security mechanism, performance advantages close to C/C++, excellent developer community, experience of documents, tool chains and IDEs. This blog will introduce the process of using Rust to rewrite the project and gradually implementing the production environment, as well as the reasons for choosing Rust in the rewrite process, the problems encountered, and the results of using Rust to rewrite.</p><p>The project we are using Rust to develop is called <a href="https://github.com/KusionStack/KCLVM" target="_blank" rel="noopener noreferrer">KCL</a>. (KCL) is an open source constraint-based record and functional language. KCL improves the writing of a large number of complex configurations through mature programming language technology and practice, and is committed to building better modularity, scalability and stability around configuration, simpler logic writing, fast automation and good ecological extensionality. For more specific KCL usage scenarios, please visit the <a href="https://kcl-lang.github.io/" target="_blank" rel="noopener noreferrer">KCL website</a>. This blog will not repeat them too much.</p><p>KCL was written in Python before. Considering the user experience, performance and stability, we have decided to rewrite it in Rust, and the following benefits were obtained:</p><ul><li>Fewer bugs due to Rust's powerful compilation check and error handling.</li><li>66% improvement in language end-to-end compilation and execution performance.</li><li>The performance of the language front-end parser has been improved by 20 times.</li><li>The performance of the language semantic analyzer has been improved by 40 times.</li><li>The average memory usage of the language compiler during compilation is half of the original Python version.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-problems-have-we-encountered">What problems have we encountered<a class="hash-link" href="#what-problems-have-we-encountered" title="Direct link to heading">​</a></h2><p>The compiler, build system or runtime uses Rust to do similar things in technology like projects of the same type in the community <a href="https://github.com/denoland/deno" target="_blank" rel="noopener noreferrer">deno</a>, <a href="https://github.com/swc-project/swc" target="_blank" rel="noopener noreferrer">swc</a>, <a href="https://github.com/vercel/turbo" target="_blank" rel="noopener noreferrer">turbopack</a>, <a href="https://github.com/rust-lang/rust" target="_blank" rel="noopener noreferrer">rustc</a>. We used Rust to completely build the front, middle and runtime of the compiler, and achieved some results, but we did not do this about a year ago.</p><p>A year ago, we used Python to build the whole implementation of KCL compiler. Although it ran well at the beginning, Python was easy to use, rich in ecology, and the team's research and development efficiency was also very high, with the expansion of the code and the increase of the number of engineers, code maintenance became more difficult.</p><p>Although we forced to write Python type annotations in the project and adopted stricter lint tools. Besides, the coverage of code test lines has also reached more than 90%, but there are still many runtime errors, such as Python None empty objects, attributes not found, and so on. We need to be careful when refactoring Python code, which seriously affects the user experience.</p><p>In addition, when KCL users are the majority of developers, any errors in the programming language or compiler internal implementation are intolerable, which also brings a series of problems to our user experience. Programs written in Python start slowly, and their performance cannot meet the efficiency demands of online compilation and execution of the automation system, because in our scenario, After users modify KCL code, they need to be able to quickly display the compilation results. Obviously, the compiler written in Python cannot meet the use requirements well.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="why-use-rust">Why use Rust<a class="hash-link" href="#why-use-rust" title="Direct link to heading">​</a></h2><p>We chose Rust for the following reasons:</p><ul><li>We used Python, Go and Rust to implement a simple programming language stack virtual machine and made a performance comparison. In this scenario, Go and Rust have similar performance, Python has a large performance gap, and Rust is adopted under comprehensive consideration. The details of the stack virtual machine code implemented by the three languages are here: <a href="https://github.com/Peefy/StackMachine" target="_blank" rel="noopener noreferrer">https://github.com/Peefy/StackMachine</a>.</li><li>More and more compilers or runtimes of programming languages, especially front-end infrastructure projects, are written or refactored using Rust. In addition, Rust has appeared in infrastructure, database, search engine, network, cloud native, UI, embedded and other fields. At least, the feasibility and stability of the implementation of programming languages have been verified.</li><li>Considering that the subsequent project development will involve the direction of blockchain and smart contract, and a large number of blockchain and smart contract projects in the community are written by Rust.</li><li>Better performance and stability can be achieved through Rust, making the system easier to maintain and more robust. At the same time, C APIs can be exposed through FFI for multilingual use and expansion, facilitating ecological expansion and integration.</li><li>Rust supports WASM in a friendly way. A large number of WASM ecosystems in the community are built by Rust. KCL languages and compilers can be compiled into WASM with the help of Rust and run in browsers.</li></ul><p>Based on the above reasons, we chose Rust instead of Go. In the whole rewriting process, we found that Rust's comprehensive quality is really excellent (high performance and enough abstraction). Although there is some cost in some language features, especially the lifetime, it is not rich in ecology.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-are-the-difficulties-in-using-rust">What are the difficulties in using Rust<a class="hash-link" href="#what-are-the-difficulties-in-using-rust" title="Direct link to heading">​</a></h2><p>Although we decided to rewrite the entire KCL project with Rust, most team members have no experience in writing a certain project with Rust, and I has only learned <a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreferrer">The Rust Programming Language</a>. I vaguely remember that I gave up when I learned about intelligent pointers such as <code>Rc</code> and <code>RefCell</code>. At that time, I didn't expect that there would be anything similar to C++ in Rust.</p><p>The risk of using Rust is mainly the cost of Rust language learning, which is indeed mentioned in various Rust blogs. Because the overall architecture of the KCL project has not changed much, and some module design and code writing have been optimized for Rust, so the entire rewrite is carried out in the process of learning while practicing. When we first started to use Rust to write the whole project, we still spent a lot of time on knowledge query, compilation and debugging. However, as the project progressed, the difficulties we encountered in our experience when using Rust were mainly mental transformation and development efficiency.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="mental-transformation">Mental transformation<a class="hash-link" href="#mental-transformation" title="Direct link to heading">​</a></h3><p>First of all, the syntax and semantics of Rust well absorb and integrate the concepts related to the type system in functional programming, such as the Abstract Algebraic Type (ADT). In addition, there is no concept related to "inheritance" in Rust. If you can't understand it well, even ordinary structure definitions in other languages may take a lot of time in Rust. For example, the following Python code may be defined like this in Rust</p><ul><li>Python</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> dataclasses </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> dataclass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">KCLObject</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#393A34">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">KCLIntObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KCLObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#393A34">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">KCLFloatObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KCLObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">float</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>Rust</li></ul><div class="codeBlockContainer_I0IT language-rust theme-code-block"><div class="codeBlockContent_wNvx rust"><pre tabindex="0" class="prism-code language-rust codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">enum KCLObject {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Int(u64),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Float(f64),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Of course, more time is spent fighting against the error reports of the Rust compiler itself. The Rust compiler will often cause developers to "run into a wall", such as borrowing check errors. Especially for the KCL compiler, its core structure is the Abstract Syntax Tree (AST), which is a recursive and nested tree structure.</p><p>It is sometimes difficult to give consideration to the relationship between variable variability and borrowing check in Rust, Just like the scope structure <code>Scope</code> defined in KCL compiler, for scenarios with circular references, it is used to display the interdependence of data that needs to be aware of, while making extensive use of intelligent pointer structures commonly used in Rust such as <code>Rc</code>, <code>RefCell</code> and <code>Weak</code>.</p><div class="codeBlockContainer_I0IT language-rust theme-code-block"><div class="codeBlockContent_wNvx rust"><pre tabindex="0" class="prism-code language-rust codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">/// A Scope maintains a set of objects and links to its containing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/// (parent) and contained (children) scopes. Objects may be inserted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/// and looked up by name. The zero value for Scope is a ready-to-use</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/// empty scope.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Clone, Debug)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct Scope {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /// The parent scope.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub parent: Option&lt;Weak&lt;RefCell&lt;Scope&gt;&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /// The child scope list.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub children: Vec&lt;Rc&lt;RefCell&lt;Scope&gt;&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /// The scope object mapping with its name.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub elems: IndexMap&lt;String, Rc&lt;RefCell&lt;ScopeObject&gt;&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /// The scope start position.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub start: Position,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /// The scope end position.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub end: Position,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /// The scope kind.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub kind: ScopeKind,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="development-efficiency">Development efficiency<a class="hash-link" href="#development-efficiency" title="Direct link to heading">​</a></h3><p>The development efficiency of Rust can be described as "restraining first and then improving". At the beginning of the handwritten project, if the team members have not been exposed to the concept of functional programming and related programming habits, the development speed will be significantly slower than Python, Go, Java and other languages. However, once they become familiar with the common methods and best practices of the Rust standard library, as well as the common error modification of the Rust compiler, the development efficiency will be greatly improved, and they can write high-quality, safe and efficient code natively.</p><p>For example, I have encountered a Rust lifetime error as shown in the following code. After a long time of troubleshooting, it was found that the lifetime mismatch was caused by forgetting to label lifetime parameters. In addition, the lifetime of Rust is coupled with concepts such as type system, scope, ownership, and borrowing check, resulting in a high cost and complexity of understanding, and error reporting information is often not as obvious as type errors. The lifetime mismatch error reporting information is sometimes slightly inflexible, which may lead to a high cost of troubleshooting. Of course, the efficiency will be improved after more familiar with relevant concepts.</p><div class="codeBlockContainer_I0IT language-rust theme-code-block"><div class="codeBlockContent_wNvx rust"><pre tabindex="0" class="prism-code language-rust codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">struct Data&lt;'a&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    b: &amp;'a u8,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// func2 omit lifecycle parameters, and func2 does not.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// The lifecycle of func2 will be deduced as '_ by the Rust compiler by default,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// which may lead to lifetime mismatch error.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl&lt;'a&gt; Data&lt;'a&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn func1(&amp;self) -&gt; Data&lt;'a&gt; {Data { b: &amp;0 }}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn func2(&amp;self) -&gt; Data {Data { b: &amp;0 }}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="rewrite-revenue-ratio-using-rust">Rewrite revenue ratio using Rust<a class="hash-link" href="#rewrite-revenue-ratio-using-rust" title="Direct link to heading">​</a></h2><p>After several members of the team spent several months using Rust to completely rewrite and stably put it into the production environment for several months, we reviewed the whole process and felt that it was very rewarding.</p><p>From a technical perspective, the rewrite process not only trained to quickly learn a new programming language and programming knowledge, but also put them into practice, And the whole rewrite process made us reflect on the unreasonable design of the KCL compiler and modify it. For a programming language, this is a long cycle project. What we learned is that the compiler system is more stable, safe, with clear code, fewer bugs, and better performance.</p><p>Although not all modules get 40 times the performance (because the performance bottleneck of some modules, such as the KCL runtime, is the memory deep copy operation), but I personally think it is still worthwhile. And when Rust has been used for a certain period of time, mind and development efficiency are no longer limiting factors.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>I personally think that the most important thing after using Rust to rewrite the project is whether I have learned a new programming language or whether Rust is very popular and we have written many fancy codes using Rust. It really makes the KCL language and compiler more stable, and the startup speed and automation efficiency are no longer troubled. The performance of KCL is better than that of other programming languages in the same type of fields in the community, so that users of our language and tools can experience the improvement. These are all due to Rust's no-GC, high-performance, better error handling, memory management, zero abstraction and other features. In short, as users, they are the biggest beneficiaries.</p><p>Finally, if you like the KCL project, or want to use KCL for your own scenarios, or want to use Rust to participate in an open source project, welcome to visit <a href="https://github.com/KusionStack/community" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/community</a> to join our community to participate in discussion and co construction 👏👏👏。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/KusionStack/KCLVM" target="_blank" rel="noopener noreferrer">https://github.com/KusionStack/KCLVM</a></li><li><a href="https://github.com/Peefy/StackMachine" target="_blank" rel="noopener noreferrer">https://github.com/Peefy/StackMachine</a></li><li><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreferrer">https://doc.rust-lang.org/book/</a></li><li><a href="https://github.com/sunface/rust-course" target="_blank" rel="noopener noreferrer">https://github.com/sunface/rust-course</a></li><li><a href="https://www.influxdata.com/blog/rust-can-be-difficult-to-learn-and-frustrating-but-its-also-the-most-exciting-thing-in-software-development-in-a-long-time/" target="_blank" rel="noopener noreferrer">https://www.influxdata.com/blog/rust-can-be-difficult-to-learn-and-frustrating-but-its-also-the-most-exciting-thing-in-software-development-in-a-long-time/</a></li></ul>]]></content>
        <author>
            <name>Pengfei, Xu</name>
        </author>
        <category label="KCL" term="KCL"/>
        <category label="Rust" term="Rust"/>
        <category label="Performance" term="Performance"/>
        <category label="Programming Language" term="Programming Language"/>
        <category label="Compiler" term="Compiler"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[KCL Introduction on SETTA 2022 Meeting]]></title>
        <id>2022-kcl-setta-meeting</id>
        <link href="https://kcl-lang.github.io/blog/2022-kcl-setta-meeting"/>
        <updated>2022-10-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Download PDF]]></summary>
        <content type="html"><![CDATA[<p><a href="https://kcl-lang.github.io/talks/kcl-setta2022.pdf" target="_blank" rel="noopener noreferrer">Download PDF</a></p>]]></content>
        <author>
            <name>Pengfei, Xu</name>
        </author>
        <category label="KCL" term="KCL"/>
        <category label="Configuration" term="Configuration"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Landscape of Declarative Configuration]]></title>
        <id>2022-declarative-config-overview</id>
        <link href="https://kcl-lang.github.io/blog/2022-declarative-config-overview"/>
        <updated>2022-09-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The blog is only used to clarify the landscape of declarative configuration, KCL core concept and features, as well as the comparison with other configuration languages. More concepts, background and design of KCL, as well as the differences with other corresponding open-source technology, will not be discussed in this blog.]]></summary>
        <content type="html"><![CDATA[<p>The blog is only used to clarify the landscape of declarative configuration, <a href="https://github.com/KusionStack/KCLVM" target="_blank" rel="noopener noreferrer">KCL</a> core concept and features, as well as the comparison with other configuration languages. More concepts, background and design of <a href="https://kcl-lang.github.io/" target="_blank" rel="noopener noreferrer">KCL</a>, as well as the differences with other corresponding open-source technology, will not be discussed in this blog.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="1-the-landscape-of-declarative-configuration">1. The Landscape of Declarative Configuration<a class="hash-link" href="#1-the-landscape-of-declarative-configuration" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="11-importance-of-configuration">1.1 Importance of Configuration<a class="hash-link" href="#11-importance-of-configuration" title="Direct link to heading">​</a></h3><ul><li>There are thousands of configuration updates every day because the software development and the configuration itself is gradually evolving, which has a high demand for large-scale efficiency.<ul><li><strong>The configuration is updated more frequently</strong>: The evolving business requirements, infrastructure requirements and other factors mean that the system needs to change constantly, and the configuration provides a low-cost way to change the system functions.</li><li><strong>The configuration scale is getting larger</strong>: A configuration is often distributed to different cloud sites, different tenants, different environments, etc.</li><li><strong>Wide configuration scenarios</strong>: Application, database, network, monitoring, etc.</li><li><strong>Various configuration formats</strong>: JSON, YAML, XML, TOML, various configuration templates such as Java Velocity, Go Template, etc.</li></ul></li><li>The stability of the configuration is crucial. One of the main reasons for system errors is that a large number of engineers frequently update the configuration. Table 1 shows several system error events caused by configuration.</li></ul><table><thead><tr><th>Time</th><th>Event</th></tr></thead><tbody><tr><td>2021.07</td><td>The Bilibili website in China went down because SLB Lua configuration code fell into an infinite loop with calculation errors</td></tr><tr><td>2021.10</td><td>KT Company in South Korea suffers major network interruption nationwide due to wrong routing configuration</td></tr></tbody></table><p>Table 1 System error events caused by configuration.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="12-classification-of-declarative-configuration">1.2 Classification of Declarative Configuration<a class="hash-link" href="#12-classification-of-declarative-configuration" title="Direct link to heading">​</a></h3><p>The cloud-native era has brought about rapid technological development, with a large number of declarative configurations. As shown in Fig. 1, declarative configuration can be generally divided into the following ways.</p><p><img loading="lazy" src="/assets/images/01-declarative-config-e5396685e3f3498f4b59854f8cf5eecb.png" width="1796" height="1076"></p><p>Fig. 1: Classification of declarative configuration.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="121-structured-k-v">1.2.1 Structured K-V<a class="hash-link" href="#121-structured-k-v" title="Direct link to heading">​</a></h4><ul><li>Capability<ul><li>Structured K-V meets the minimum data declaration requirements (int, string, list, dict, etc.).</li><li>Declarative API meets the development demands of X as Data with the rapid development and application of cloud native technology.</li><li>Machine-readable and writable, human-readable.</li></ul></li><li>Pros.<ul><li>Simple syntax, easy to write and read.</li><li>Rich multilingual APIs.</li><li>Various path tools for data query, such as XPath, JsonPath, etc.</li></ul></li><li>Cons.<ul><li>Too much redundant information: when the configuration scale is large, it is difficult to maintain the configuration, because important configuration information is hidden in a large number of irrelevant repetitive data details.</li><li>Lack of functionality: constraint, complex logic, test, debug, abstraction, etc.</li><li><a href="https://kustomize.io/" target="_blank" rel="noopener noreferrer">Kustomize</a>'s patches are basically by fixing several patch merge strategies</li></ul></li><li>Tech. and Product<ul><li>JSON/YAML: It is very convenient for reading and automation, and has different languages API support.</li><li><a href="https://kustomize.io/" target="_blank" rel="noopener noreferrer">Kustomize</a>: It provides a solution to customize the Kubernetes resource base configuration and differential configuration without <strong>template</strong> and <strong>DSL</strong>. It does not solve the constraint problem itself, but needs to cooperate with a large number of additional tools to check constraints, such as <a href="https://github.com/stackrox/kube-linter" target="_blank" rel="noopener noreferrer">Kube-linter</a>、<a href="https://github.com/bridgecrewio/checkov" target="_blank" rel="noopener noreferrer">Checkov</a>. Fig. 2 shows the typical working mode of Kustomize.</li></ul></li></ul><p><img loading="lazy" src="/assets/images/02-kustomize-8aa6da28d0aa5551360333a978452f23.png" width="1222" height="1220"></p><p>Fig. 2: Typical working mode of Kustomize.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="123-templated-k-v">1.2.3 Templated K-V<a class="hash-link" href="#123-templated-k-v" title="Direct link to heading">​</a></h4><ul><li>Capability<ul><li>Output different static configuration data with a template and dynamic parameters.</li></ul></li><li>Pros.<ul><li>Simple configuration logic and loop support.</li><li>External dynamic parameter support.</li></ul></li><li>Cons.<ul><li>It is easy to fall into the trap that all configurations are template parameters.</li><li>When the configuration scale becomes larger, it is difficult for developers and tools to maintain and analyze them.</li></ul></li><li>Tech. and Product<ul><li><a href="https://helm.sh/" target="_blank" rel="noopener noreferrer">Helm</a>: The package management tool of Kubernetes resources, which manages the configuration of Kubernetes resources through the configuration template. Fig. 3 shows a Helm Jekins Package ConfigMap configuration template. It can be seen that these templates are very short with simple logic. A series of resource configurations suitable for Kubernetes basic components are installed through package management and additional configuration parameters. Compared with the simply templated K-V, Helm provides template storage, reference and semantic version management capabilities. Compared with Kustomize, Helm is more suitable for managing external Charts but is not good at multi-environment and multi-tenant configuration management.</li><li>Other configuration templates: Java Velocity, Go Template and other text template engines are very suitable for HTML writing templates. However, when used in configuration scenarios, they are difficult for developers and tools to maintain and analyze.</li></ul></li></ul><p><img loading="lazy" src="/assets/images/03-helm-88b0bd224c35a3f803c1fda38413ff13.png" width="2108" height="1248"></p><p>Fig. 3: Helm Jekins Package ConfigMap configuration template.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="123-programmable-k-v">1.2.3 Programmable K-V<a class="hash-link" href="#123-programmable-k-v" title="Direct link to heading">​</a></h4><p><code>Configuration as Code (CaC)</code> uses code to generate configuration, just like engineers only need to write advanced GPL code, rather than manually writing error-prone and difficult-to-understand server binary code.</p><ul><li><p>Configuration changes are treated as seriously as code changes, and unit tests and integration tests can also be executed.</p></li><li><p>Code modularization is a key reason why maintaining configuration code is easier than manually editing configuration files such as JSON/YAML.</p></li><li><p>Capability</p><ul><li>Necessary programming language abilities (variable definitions, logical judgments, loops, assertions, etc.).</li><li>Necessary template capability, which supports the definition of data templates and the use of templates to obtain new configuration data.</li><li>Code modularity: structure definition and package management.</li><li>Machine-readable and writable, human-readable and writable.</li></ul></li><li><p>Pros.</p><ul><li>Necessary programming ability.</li><li>Code modularization and abstraction.</li><li>Configuration template and override ability.</li></ul></li><li><p>Cons.</p><ul><li>Insufficient type check.</li><li>Insufficient constraint capacity.</li><li>Many runtime errors.</li></ul></li><li><p>Tech. and Product</p><ul><li><a href="https://github.com/rix0rrr/gcl" target="_blank" rel="noopener noreferrer">GCL</a>: A declarative configuration programming language implemented in Python provides the necessary language capabilities to support template abstraction. However, the compiler itself is written in Python, and the language itself is interpreted and executed. For large template instances (such as kubernetes model), the performance is poor.</li><li><a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener noreferrer">HCL</a>: A Go implementation structured configuration language. The native syntax of HCL is inspired by libucl and nginx configurations. It is used to create a structured configuration language that is friendly to humans and machines, mainly for devops tools, server configurations, and resource configurations as a <a href="https://www.terraform.io/language" target="_blank" rel="noopener noreferrer">Terraform language</a>.</li><li><a href="https://github.com/google/jsonnet" target="_blank" rel="noopener noreferrer">Jsonnet</a>: A data template language implemented in C++, suitable for application and tool developers, can generate configuration data and organize, simplify and manage large configurations without side effects.</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="124-typed-k-v">1.2.4 Typed K-V<a class="hash-link" href="#124-typed-k-v" title="Direct link to heading">​</a></h4><ul><li>Capability<ul><li>Based on programmable K-V, typed K-V has more capabilities of type constraints.</li></ul></li><li>Pros.<ul><li>The configuration merge is completely idempotent, which naturally prevents configuration conflicts.</li><li>Rich constraint syntax for writing configuration.</li><li>Abstract the type and value constraints into the same form, which is simple to write.</li><li>Configuration order independent.</li></ul></li><li>Cons.<ul><li>The concepts of graph merging and idempotent merging are complex, and the understanding cost is high.</li><li>The mixed definition of type and value improves the degree of abstraction and the cost of understanding. All constraints are checked at runtime, and there is a performance bottleneck for the large-scale configuration code.</li><li>It is difficult to implement multi-tenant and multi-environment scenarios that want to configure coverage and modification.</li><li>For constrained scenarios with conditions, the user interface for writing hybrid definitions of definition and verification is unfriendly.</li></ul></li><li>Tech. and Product<ul><li><a href="https://github.com/cue-lang/cue" target="_blank" rel="noopener noreferrer">CUE</a>: The core problem CUE solves is "type checking", which is mainly used in configuration constraint verification scenarios and simple cloud native configuration scenarios.</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="125-modeled-k-v">1.2.5 Modeled K-V<a class="hash-link" href="#125-modeled-k-v" title="Direct link to heading">​</a></h4><ul><li>Pros.<ul><li>High-level language modeling capability as the core description<ul><li>Modeling</li><li>Immutability</li><li>Constraints</li></ul></li><li>High scalability through automatic merge mechanism of isolated config blocks.</li><li>Writing and testing methods like a high-level programming language.</li><li>Machine-readable and writable, human-readable and writable.</li></ul></li><li>Cons.<ul><li>The expansion of new models and ecological construction requires certain R&amp;D costs</li></ul></li><li>Tech. and Product<ul><li><a href="https://github.com/KusionStack/KCLVM" target="_blank" rel="noopener noreferrer">KCL</a>: A declarative configuration and policy programming language implemented by Rust, which improves the writing of a large number of complex configurations through mature programming language technology and practice, and is committed to building better modularity, scalability and stability around configuration, simpler logic writing, fast automation and good ecological extensionally. Fig. 4 shows a typical scenario of KCL writing application delivery configuration code.</li></ul></li></ul><p><img loading="lazy" src="/assets/images/04-kcl-app-code-d82ba09686d177a29b92ebf03c3c41dd.png" width="962" height="1030"></p><p>Fig. 4: A typical scenario of KCL writing application delivery configuration code.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="13-guidelines-and-best-practices-for-different-declarative-configurations">1.3 Guidelines and Best Practices for Different Declarative Configurations<a class="hash-link" href="#13-guidelines-and-best-practices-for-different-declarative-configurations" title="Direct link to heading">​</a></h3><ul><li><p>Configuration scale: For small-scale configuration scenarios, we can use YAML/JSON and other configurations, such as the simple configuration of the application itself and CI/CD configuration. In addition, for the requirements of multi-environment and multi-tenant in small-scale configuration scenarios, Kustomize's overlay capability can be used to implement operations such as merging and covering simple configurations.</p></li><li><p>The necessity of model abstraction and constraint: For large-scale configuration scenarios, especially for those with urgent needs for configuration model and O&amp;M feature R&amp;D and precipitation of multi-tenant and multi-environment, the K-V method of coding, typing and modeling can be used.</p></li></ul><p>In addition, consider the use scenarios of different declarative configurations:</p><ul><li>YAML is recommended if you need to write structured static K-V or use Kubernetes' native tools.</li><li>HCL is recommended if you want to use programming language convenience to remove boilerplate with good human readability, or if you are already a Terraform user.</li><li>CUE is recommended if you want to use a type system to improve stability and maintain scalable configurations.</li><li>KCL is recommended if you want types and modelings like a modern language, scalable configurations, in-house pure functions and rules, and production-ready performance and automation.</li></ul><p>Different from other languages of the same type in the community, KCL is a static strongly typed compilation language for application developers and adopts modern language design and technology.</p><blockquote><p>Note that this blog will not discuss the general language used for writing configuration. The general language is usually overkill, that is, it goes far beyond the problems that need to be solved. There are various security problems in the general language, such as the ability boundary problem (starting local threads, accessing IO, network, code infinitive looping and other security risks). For example, in the music field, there are special notes to express music, which is convenient for learning and communication, It can not be expressed clearly in general language.</p><p>In addition, because of its various styles of the general language, which has the cost of unified maintenance, management and automation. The general language is usually used to write the client runtime, which is a continuation of the server runtime. It is not suitable for writing configurations that are independent of the runtime, and it is compiled into binary and started from the process finally. Besides, the stability and scalability are not easy to control. However, the configuration language often be used to write data, which is combined with simple logic, and it describes the expected final result, which is then consumed by the compiler or engine.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_mojV" id="2-kcl-core-features-and-use-cases">2. KCL Core Features and Use Cases<a class="hash-link" href="#2-kcl-core-features-and-use-cases" title="Direct link to heading">​</a></h2><p>The core features of KCL are its <strong>modeling</strong> and <strong>constraint</strong> capabilities, and the basic functions of KCL revolve around the two core features. In addition, KCL follows the user-centric configuration concept to design its basic functions, which can be understood from two aspects:</p><ul><li><strong>Domain model-centric configuration view</strong>: With the rich features of KCL language and <a href="https://kcl-lang.github.io/docs/tools/cli/openapi/quick-start" target="_blank" rel="noopener noreferrer">KCL OpenAPI</a> tools, we can directly integrate a wide range of well-designed models in the community into KCL (such as the K8s resource model). We can also design and implement our own KCL models or libraries according to different scenarios, forming a complete set of domain models for other configuration end users to use.</li><li><strong>End user-centric configuration view</strong>: With KCL's code encapsulation, abstraction and reuse capabilities, the model architecture can be further abstracted and simplified (for example, the K8s resource model is abstracted into an application-centered server model) to <strong>minimize the</strong> end user configuration input**, simplify the user's configuration interface, and facilitate manual or automatic API modification.</li></ul><p>No matter what configuration view is centered on, for configuration code, there are requirements for configuration data constraints, such as type constraints, required/optional constraints on configuration attributes, range constraints, and immutability constraints. This is also one of the core issues KCL is committed to solving. KCL mainly contains the core features shown in Fig. 5.</p><p><img loading="lazy" src="/assets/images/05-kcl-core-feature-07f8b663f646233ca933999c6d5eb01d.png" width="892" height="878"></p><p>Fig. 5: KCL core features.</p><ul><li><strong>Easy-to-use</strong>: Originated from high-level languages ​​such as Python and Golang, incorporating functional language features with low side effects.</li><li><strong>Well-designed</strong>: Independent Spec-driven syntax, semantics, runtime and system modules design.</li><li><strong>Quick modeling</strong>: <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour#schema" target="_blank" rel="noopener noreferrer">Schema</a>-centric configuration types and modular abstraction.</li><li><strong>Rich capabilities</strong>: Configuration with type, logic and policy based on <a href="https://kcl-lang.github.io/docs/reference/lang/lang/codelab/simple" target="_blank" rel="noopener noreferrer">Config</a>, <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#schema" target="_blank" rel="noopener noreferrer">Schema</a>, <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#function" target="_blank" rel="noopener noreferrer">Lambda</a>, <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#rule" target="_blank" rel="noopener noreferrer">Rule</a>.</li><li><strong>Stability</strong>: Configuration stability built on <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#type-system" target="_blank" rel="noopener noreferrer">static type system</a>, <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#validation" target="_blank" rel="noopener noreferrer">constraints</a>, and <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour#rule" target="_blank" rel="noopener noreferrer">rules</a>.</li><li><strong>Scalability</strong>: High scalability through <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#-operators-1" target="_blank" rel="noopener noreferrer">automatic merge mechanism</a> of isolated config blocks.</li><li><strong>Fast automation</strong>: Gradient automation scheme of <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour/#kcl-cli-variable-override" target="_blank" rel="noopener noreferrer">CRUD APIs</a>, <a href="https://kcl-lang.github.io/docs/reference/lang/xlang-api/overview" target="_blank" rel="noopener noreferrer">multilingual SDKs</a>, <a href="https://github.com/KusionStack/kcl-plugin" target="_blank" rel="noopener noreferrer">language plugin</a></li><li><strong>High performance</strong>: High compile time and runtime performance using Rust &amp; C and <a href="https://llvm.org/" target="_blank" rel="noopener noreferrer">LLVM</a>, and support compilation to native code and <a href="https://webassembly.org/" target="_blank" rel="noopener noreferrer">WASM</a>.</li><li><strong>API affinity</strong>: Native support API ecological specifications such as <a href="https://github.com/KusionStack/kcl-openapi" target="_blank" rel="noopener noreferrer">OpenAPI</a>, Kubernetes CRD, Kubernetes YAML spec.</li><li><strong>Development friendly</strong>: Friendly development experiences with rich <a href="https://kcl-lang.github.io/docs/reference/cli/kcl/" target="_blank" rel="noopener noreferrer">language tools</a> (Format, Lint, Test, Vet, Doc, etc.) and <a href="https://github.com/kcl-lang/vscode-kcl" target="_blank" rel="noopener noreferrer">IDE plugins</a>.</li><li><strong>Safety &amp; maintainable</strong>: Domain-oriented, no system-level functions such as native threads and IO, low noise and security risk, easy maintenance and governance.</li><li><strong>Production-ready</strong>: Widely used in production practice of platform engineering and automation at Ant Group.</li></ul><p><img loading="lazy" src="/assets/images/06-kcl-code-design-a7eb793b08f0d9e089d7f17d7971749e.png" width="520" height="394"></p><p>Fig. 6: KCL core design.</p><p>For more language design and capabilities, see <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour" target="_blank" rel="noopener noreferrer">KCL Documents</a>. Although KCL is not a general language, it has corresponding application scenarios. As shown in Fig. 6, developers can write <strong>config</strong>, <strong>schema</strong>, <strong>function</strong> and <strong>rule</strong> through KCL, where config is used to define data, schema is used to describe the model definition of data, rule is used to validate data, and schema and rule can also be combined to use models and constraints that fully describe data, In addition, we can also use the lambda pure function in KCL to organize data code, encapsulate common code, and call it directly when needed.</p><p>For use cases, KCL can perform structured K-V data validation complex configuration model definition and abstraction, strong constraint verification to avoid configuration errors, automation integration and engineering expansion. These features and use cases are described below.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="21-validation-of-structured-data">2.1 Validation of Structured Data<a class="hash-link" href="#21-validation-of-structured-data" title="Direct link to heading">​</a></h3><p>As shown in Fig 7, KCL supports format validation of JSON/YAML data. As a configuration language, KCL covers almost all features of OpenAPI in terms of validation. In KCL, the configuration data can be constrained by a structure definition. At the same time, it supports user-defined constraint rules through check blocks, and writing validation expressions in the schema to verify and constrain the attributes defined in the schema. The check expression can be used to clearly and simply verify whether the input JSON/YAML meets the corresponding schema structure definition and check constraints.</p><p><img loading="lazy" src="/assets/images/07-kcl-validation-49d29ddd21947f4c239531c5db1efc8e.png" width="481" height="173"></p><p>Fig. 7: Validation of structured data in KCL.</p><p>Based on this, KCL provides the corresponding <a href="https://kcl-lang.github.io/docs/reference/cli/kcl/vet" target="_blank" rel="noopener noreferrer">Validation Tool</a> to validate JSON/YAML data directly.In addition, based on this capability, we can build a K-V validation visualization product as shown in Fig. 8.</p><p><img loading="lazy" src="/assets/images/08-kcl-validation-ui-969312043d6654caf53c8a23854d0ec1.png" width="460" height="388"></p><p>Fig. 8: A K-V validation visualization product based on KCL.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="22-definition-and-abstraction-of-complex-configuration-model">2.2 Definition and Abstraction of Complex Configuration Model<a class="hash-link" href="#22-definition-and-abstraction-of-complex-configuration-model" title="Direct link to heading">​</a></h3><p>As shown in Fig 9, with the help of the <a href="https://kcl-lang.github.io/docs/reference/cli/openapi/quick-start" target="_blank" rel="noopener noreferrer">KCL OpenAPI</a> tool, we can directly integrate a wide range of well-designed models.</p><p><img loading="lazy" src="/assets/images/09-kcl-modeling-b4ad4cc5ee1ec1f61c87ac89f42c466e.png" width="753" height="389"></p><p>Fig. 9: General way of KCL complex configuration modeling.</p><p>As shown in Figure 10, <a href="https://github.com/kcl-lang/konfig" target="_blank" rel="noopener noreferrer">Konfig</a> is used to manage all KCL configuration codes, the business configuration code and basic configuration code are stored in a mono repo, which facilitates the version dependency management between codes, and the automatic system processing is relatively simple. It is sufficient to locate the directory and files of the unique code base. The codes are interconnected, managed uniformly, and easy to find, modify, and maintain. Besieds, the unified CI/CD process can be used for configuration management.</p><p><img loading="lazy" src="/assets/images/10-kcl-konfig-bd148de871df5c5a301313ae17d0be0b.png" width="363" height="356"></p><p>Fig. 10: Using KCL's language capabilities to integrate domain models and user models.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="23-strong-constraint-to-avoid-errors">2.3 Strong Constraint to Avoid Errors<a class="hash-link" href="#23-strong-constraint-to-avoid-errors" title="Direct link to heading">​</a></h3><p>As shown in Fig. 11, configuration errors can be avoided through strong constraint checking methods in KCL.</p><p><img loading="lazy" src="/assets/images/11-kcl-constraint-e336ac2830a49b4e347a75c40a22cf9d.png" width="569" height="326"></p><p>Fig. 11: Strong constraint checking methods in KCL.</p><ul><li>The KCL language's type system is designed to be static. Type and value definitions are separated. Type derivation and type checking at compile time are supported. Static types can not only analyze most type errors at compile time in advance, but also reduce the performance loss of dynamic type checking at runtime. In addition, the attributes of the KCL schema are forced to be not null, which can effectively avoid configuration omissions.</li><li>When KCL configurations to be exported are declared, their types and values cannot change. This static feature ensures that the configuration will not be tampered with at will.</li><li>KCL supports further ensuring stability through the built-in validation rules of the structure. For example, Fig. 12 shows that the KCL code defines the constraints for <code>containerPort</code>, <code>services</code>, and <code>volumes</code> in <code>App</code>.</li></ul><p><img loading="lazy" src="/assets/images/12-kcl-app-schema-0cb24fd30175faaffb6d06e3a795c260.png" width="1364" height="588"></p><p>Fig. 12: KCL code validation with constraint rules.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="24-isolated-configuration-block-merging">2.4 Isolated Configuration Block Merging<a class="hash-link" href="#24-isolated-configuration-block-merging" title="Direct link to heading">​</a></h3><p>KCL provides the ability to write isolated configuration blocks and automatically merge them, and supports idempotent merge, patch merge, and other strategies. Multiple configurations in idempotent merging need to meet the exchange law, and developers need to manually handle configuration conflicts between base and different environments. The patch merging includes overlay, deletion and addition. KCL simplifies the collaborative development on the user side and reduces the coupling between configurations through multiple merging strategies.</p><p><img loading="lazy" src="/assets/images/13-kcl-isolated-config-4bbfae7a87567d43c1285fdf93e62ad7.png" width="1638" height="842"></p><p>Fig. 13: Multi environment scenario configuration block writing.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="25-automation">2.5 Automation<a class="hash-link" href="#25-automation" title="Direct link to heading">​</a></h3><p>KCL provides many automation related capabilities, mainly including tools and multilingual APIs. Via <code>package_identifier : key_identifier</code> mode, KCL supports the indexing of any configured key value, thus completing the addition, deletion, modification and query of any key value. For example, Fig 14. shows that we can directly execute the following command to modify the image. The code diff before and after modification is also shown in Fig. 14.</p><p><img loading="lazy" src="/assets/images/14-kcl-image-update-da47dd269560008f15f287c5a4adb005.png" width="1828" height="502"></p><p>Fig. 14: Automatic modification of application configuration image via KCL CLI/API.</p><p>In addition, the automation capability of KCL can be realized as shown in Fig. 15 and integrated into CI/CD.</p><p><img loading="lazy" src="/assets/images/15-kcl-automation-8c88e4bbdd38b5040457f647986a89c3.png" width="890" height="247"></p><p>Fig. 15: Typical KCL automation integration.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="3-comparison-between-kcl-and-other-declarative-configurations">3. Comparison between KCL and Other Declarative Configurations<a class="hash-link" href="#3-comparison-between-kcl-and-other-declarative-configurations" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="31-vs-jsonyaml">3.1 vs. JSON/YAML<a class="hash-link" href="#31-vs-jsonyaml" title="Direct link to heading">​</a></h3><p>YAML/JSON configurations are suitable for small-scale configuration scenarios. For large-scale cloud native configuration scenarios that need frequent modifications, they are more suitable for KCL. The main difference involved is the difference between configuration data abstraction and deployment:</p><p>The advantages of using KCL for configuration are: for static data, the advantage of abstracting one layer means that the overall system has <strong>deployment flexibility</strong>. Different configuration environments, tenants, and runtime may have different requirements for static data, and even different organizations may have different specifications and product requirements. KCL can be used to expose the most needed and frequently modified configurations to users.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="32-vs-kustomize">3.2 vs. Kustomize<a class="hash-link" href="#32-vs-kustomize" title="Direct link to heading">​</a></h3><p>The core capability of Kustomize is its file level overlay capability. However, there is a problem of multiple overlay chains, because finding the statement of a specific attribute value does not guarantee that it is the final value, because another specific value that appears elsewhere can override it. For complex scenarios, retrieval of the inheritance chain of Kustomize files is often not as convenient as retrieval of the inheritance chain of KCL code, The specified configuration file overwrite order needs to be carefully considered. In addition, Kustomize cannot solve the problems of YAML configuration writing, constraint verification, model abstraction and development, and is more suitable for simple configuration scenarios.</p><p>In KCL, the configuration merge operation can be fine-grained to each configuration attribute in the code, and the merge strategy can be flexibly set, not limited to the overall resource, and the dependency between configurations can be statically analyzed through the import statement of KCL.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="33-vs-hcl">3.3 vs. HCL<a class="hash-link" href="#33-vs-hcl" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_mojV" id="331-features">3.3.1 Features<a class="hash-link" href="#331-features" title="Direct link to heading">​</a></h4><table><thead><tr><th></th><th>HCL</th><th>KCL</th></tr></thead><tbody><tr><td>Modeling</td><td>The user interface is not directly perceived through the Terraform provider Schema definition. In addition, the user interface is cumbersome when writing complex object and required/optional field definitions.</td><td>Modeling through KCL schema, and achieve high model abstraction through language level engineering and some object-oriented features.</td></tr><tr><td>Constraint</td><td>The dynamic parameters are constrained by the condition field of the variable. The constraints of the resource itself need to be defined by provider schema or combined with Sentinel/Rego and other policy languages. The integrity of the language itself cannot be self closed, and its implementation methods are not unified</td><td>Define structures and constraints in a unified way.</td></tr><tr><td>Scalability</td><td>Terraform HCL overrides by file. The mode is fixed and the capability is limited.</td><td>KCL can customize the configuration block writing method and multiple strategies to meet the requirements of complex multi-tenant and multi-environment configuration scenarios.</td></tr><tr><td>Code writing</td><td>The user interface is complicated when writing complex object definitions and required/optional field definitions.</td><td>Complex structure definitions and constraint are easy to write without using other GPLs or tools.</td></tr></tbody></table><h4 class="anchor anchorWithStickyNavbar_mojV" id="332-examples">3.3.2 Examples<a class="hash-link" href="#332-examples" title="Direct link to heading">​</a></h4><p><strong>Terraform HCL variable vs. KCL schema</strong></p><ul><li>HCL</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">variable </span><span class="token string" style="color:#e3116c">"subnet_delegations"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    service_delegation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      actions </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  validation </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    condition </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> null ? true </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> alltrue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> d </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  validation </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    condition </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> null ? true </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> alltrue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> n </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  validation </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    condition </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> null ? true </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> alltrue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> d </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">service_delegation </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  validation </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    condition </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> null ? true </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> alltrue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> n </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">subnet_delegations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">service_delegation</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>KCL</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">schema SubnetDelegation</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    service_delegation</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ServiceDelegation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema ServiceDelegation</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Required attributes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    actions?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Optional attributes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">subnet_delegations</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">SubnetDelegation</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> option</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"subnet_delegations"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>In addition, we can use KCL to write types, inheritance, and built-in constraints like high-level languages. These functions are not available in HCL.</p><ul><li>Using KCL to define complex type inheritance and constraints.</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">schema Person</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    firstName</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastName</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Employee</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jobTitle</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">employee </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Employee </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    firstName </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Alice"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastName </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"White"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jobTitle </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"engineer"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><strong>Terraform HCL Function vs. KCL Lambda + Plugin</strong></p><ul><li><p>As shown in <a href="https://www.terraform.io/language/functions" target="_blank" rel="noopener noreferrer">https://www.terraform.io/language/functions</a> and <a href="https://github.com/hashicorp/terraform/issues/27696" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform/issues/27696</a>，Terraform HCL provides rich built-in functions, but it does not support users to define functions in Terraform (or need to write complex Go providers to simulate a local user-defined functions); KCL not only supports users to use the lambda keyword to directly define functions in KCL code, but also supports the use of Python, Go and other languages to write <a href="https://kcl-lang.github.io/docs/reference/plugin/overview" target="_blank" rel="noopener noreferrer">plugins</a>.</p></li><li><p>Defining functions and calling them in KCL</p></li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">add_func </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">lambda</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">two </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> add_func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># 2</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>Using plug-in functions written in Python</li><li>Python code (hello/plugin.py)</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># Copyright 2020 The KCL Authors. All rights reserved.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INFO </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'name'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'hello'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'describe'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'hello doc'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'long_describe'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'long describe'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'version'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'0.0.1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:#e3116c">"""add two numbers, and return result"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> b</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>Calling plugin code</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> kcl_plugin</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">two </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hello</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><strong>Remove null values in HCL vs. Remove null values in KCL</strong></p><ul><li>HCL</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">variable </span><span class="token string" style="color:#e3116c">"conf"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    description </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name        </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    namespace   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    params </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      default     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      description </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name        </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token builtin">type</span><span class="token plain">        </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resources </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      inputs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      outputs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    results </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name        </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      description </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    steps </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      args    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      command </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      env </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      image </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      resources </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        limits </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          cpu    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          memory </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        requests </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          cpu    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          memory </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      script     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optional</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      workingDir </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin">locals</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  conf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> merge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    defaults</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">conf </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> v </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> resources </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">resources </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> v </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> steps </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> step </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> var</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">steps </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> merge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> resources </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> step </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> v </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> null </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>KCL (using <code>-n</code> flag)</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">schema Param</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Resource</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cpu</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    memory</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Step</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    args?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    command?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    env?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resources?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"limits"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"requests"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Resource</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    script?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    workingDir</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema K8sManifest</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    params</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Param</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    results?</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Step</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> K8sManifest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> option</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"conf"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>To sum up, in KCL, its types and constraints are defined in a declarative way through schema. It can be seen that compared with Terraform HCL, KCL constraints can be written more simply when the same functions are implemented (validation and condition fields do not need to be written repeatedly like Terraform), In addition, it provides the ability to set fields as optional (unlike the Terraform configuration field, which can be null by default).</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="34-vs-cue">3.4 vs. CUE<a class="hash-link" href="#34-vs-cue" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_mojV" id="341-features">3.4.1 Features<a class="hash-link" href="#341-features" title="Direct link to heading">​</a></h4><table><thead><tr><th></th><th>CUE</th><th>KCL</th></tr></thead><tbody><tr><td>Modeling</td><td>Modeling through struct, no inheritance and other features, can achieve high abstraction when there is no conflict between model definitions. Because CUE performs all constraint checks at runtime, there may be performance bottlenecks in large-scale modeling scenarios.</td><td>Modeling is conducted through KCL schema, and high model abstraction can be achieved through language level engineering and some object-oriented features (such as single inheritance). KCL is a statically compiled language with low overhead for large-scale modeling scenarios.</td></tr><tr><td>Constraint</td><td>CUE combines types and values into one concept. It simplifies the writing of constraints through various syntax. For example, generic types and enumerations are not required. Summing types and null value merging are the same thing.</td><td>KCL provides a richer check declarative constraint syntax, which makes it easier to write. For some configuration field combination constraints, it is simpler to write (compared with CUE, KCL provides more if guard combination constraints, all/any/map/filter and other collection constraint writing methods, which makes it easier to write)</td></tr><tr><td>Scalability</td><td>CUE supports configuration merging but it is completely idempotent. It may not meet the requirements of complex multi-tenant and multi- environment configuration scenarios</td><td>KCL can customize the configuration block writing method and multiple strategies to meet the requirements of complex multi-tenant and multi-environment configuration scenarios.</td></tr><tr><td>Code writing</td><td>For complex loop and constraint scenarios, it is complex to write, and it is cumbersome to write scenarios that require accurate configuration modifications.</td><td>Complex structure definition, loop, and conditional constraint scenarios are easy to write.</td></tr></tbody></table><h4 class="anchor anchorWithStickyNavbar_mojV" id="342-examples">3.4.2 Examples<a class="hash-link" href="#342-examples" title="Direct link to heading">​</a></h4><p><strong>CUE constraint vs. KCL constraint</strong></p><p>CUE (run <code>cue export base.cue prod.cue</code>)</p><ul><li>base.cue</li></ul><div class="codeBlockContainer_I0IT language-cue theme-code-block"><div class="codeBlockContent_wNvx cue"><pre tabindex="0" class="prism-code language-cue codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">// base.cue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import "list"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#App: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    domainType: "Standard" | "Customized" | "Global",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerPort: &gt;=1 &amp; &lt;=65535,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    volumes: [...#Volume],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    services: [...#Service],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#Service: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    clusterIP: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if type == "ClusterIP" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        clusterIP: "None"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#Volume: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    container: string | *"*"  // The default value of `container` is "*"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mountPath: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _check: false &amp; list.Contains(["/", "/boot", "/home", "dev", "/etc", "/root"], mountPath),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app: #App &amp; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    domainType: "Standard",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerPort: 80,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    volumes: [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            mountPath: "/tmp"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    services: [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            clusterIP: "None",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            type: "ClusterIP"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>prod.cue</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">//</span><span class="token plain"> prod</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">#App &amp; {</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerPort</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8080</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">//</span><span class="token plain"> error</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">containerPort</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conflicting values </span><span class="token number" style="color:#36acaa">8080</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">80</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>KCL (run <code>kcl base.k prod.k</code>)</p><ul><li>base.k</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># base.k</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema App</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    domainType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Standard"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Customized"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Global"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerPort</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Volume</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Service</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    check</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> containerPort </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">65535</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Service</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    clusterIP</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $</span><span class="token builtin">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    check</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        clusterIP </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"None"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> $</span><span class="token builtin">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ClusterIP"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">schema Volume</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    container</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># The default value of `container` is "*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mountPath</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    check</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mountPath </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/boot"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/home"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dev"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/etc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/root"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> App </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    domainType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Standard"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerPort </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">80</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    volumes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            mountPath </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/tmp"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    services </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            clusterIP </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"None"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            $</span><span class="token builtin">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ClusterIP"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>prod.k</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># prod.k</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> App </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Using `=` attribute operator to modify the `containerPort` of the base `app`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    containerPort </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8080</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Using `+=` attribute operator to add volumes of the base `app`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Here, it means to add one volume in the prod environment.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    volumes </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            mountPath </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/tmp2"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>In addition, due to the idempotent merge feature of CUE, it is not easy to use an overlay configuration similar to Kustomize to override the addition capability in scenarios, such as the above CUE code will report an conflict error.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="35-performance">3.5 Performance<a class="hash-link" href="#35-performance" title="Direct link to heading">​</a></h3><p>KCL performs better than CUE/Jsonnet/HCL and other languages in scenarios with large code size or high computation load (CUE and other languages are limited by the runtime constraint checking overhead, while KCL is a statically compiled language).</p><ul><li>CUE (test.cue)</li></ul><div class="codeBlockContainer_I0IT language-cue theme-code-block"><div class="codeBlockContent_wNvx cue"><pre tabindex="0" class="prism-code language-cue codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">import "list"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">temp: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for i, _ in list.Range(0, 10000, 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "a\(i)": list.Max([1, 2])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>KCL (test.k)</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">lambda</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"a${i}"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>Jsonnet (test.jsonnet)</li></ul><div class="codeBlockContainer_I0IT language-jsonnet theme-code-block"><div class="codeBlockContent_wNvx jsonnet"><pre tabindex="0" class="prism-code language-jsonnet codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">local a(x, y) = std.max(x, y);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temp: [a(1, 2) for i in std.range(0, 10000)],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>Terraform HCL (test.tf. Since the terraform <code>range</code> function only supports up to 1024 iterators, the <code>range(10000)</code> is divided into 10 sub ranges)</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r1"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r2"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r3"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r4"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r5"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r6"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r7"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">6000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r8"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">7000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r9"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">8000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">output </span><span class="token string" style="color:#e3116c">"r10"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">9000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"a%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>Running time (considering the actual resource cost of the production environment, this test is subject to the single core).</li></ul><table><thead><tr><th>Environment</th><th>KCL v0.4.3 Running time (including compilation+runtime)</th><th>CUE v0.4.3 Running time (including compilation+runtime)</th><th>Jsonnet v0.18.0 Running time (including compilation+runtime)</th><th>HCL in Terraform v1.3.0 Running time (including compilation+runtime)</th></tr></thead><tbody><tr><td>OS: macOS 10.15.7; CPU: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz; Memory: 32 GB 2400 MHz DDR4; no NUMA</td><td>440 ms (kclvm_cli run test.k)</td><td>6290 ms (cue export test.cue)</td><td>1890 ms (jsonnet test.jsonnet)</td><td>1774 ms (terraform plan -parallelism=1)</td></tr></tbody></table><h4 class="anchor anchorWithStickyNavbar_mojV" id="another-complex-case">Another Complex Case<a class="hash-link" href="#another-complex-case" title="Direct link to heading">​</a></h4><p>Using KCL and CUE to write Kubernetes configuration.</p><ul><li>CUE (test.cue)</li></ul><div class="codeBlockContainer_I0IT language-cue theme-code-block"><div class="codeBlockContent_wNvx cue"><pre tabindex="0" class="prism-code language-cue codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">package templates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> apps "k8s.io/api/apps/v1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">deployment: apps.#Deployment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">deployment: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> apiVersion: "apps/v1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> kind:       "Deployment"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> metadata: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name:   "me"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  labels: me: "me"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>KCL (test.k)</li></ul><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> kubernetes</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">api</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">apps</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">deployment </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> v1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Deployment </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metadata</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"me"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metadata</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">labels</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"me"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><table><thead><tr><th>Environment</th><th>KCL v0.4.3 Running time (including compilation+runtime)</th><th>CUE v0.4.3 Running time (including compilation+runtime)</th></tr></thead><tbody><tr><td>OS: macOS 10.15.7; CPU: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz; Memory: 32 GB 2400 MHz DDR4; no NUMA</td><td>140 ms (kclvm_cli run test.k)</td><td>350 ms (cue export test.cue)</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_mojV" id="4-kcl-core-implementation-principle">4. KCL Core Implementation Principle<a class="hash-link" href="#4-kcl-core-implementation-principle" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="41-technical-architecture">4.1 Technical Architecture<a class="hash-link" href="#41-technical-architecture" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="/assets/images/16-kcl-compiler-arch-80e0de63d5a17ac656650bf408117ef4.png" width="1876" height="674"></p><p>Fig. 16: KCL compiler architecture.</p><p>The implementation of KCLVM compiler is driven by specifications (mainly including KCL language specification, KCL multilingual integration specification, and KCL OpenAPI specification). KCL is a compiled language, maintaining the same three-stage architecture as the general language compiler, and using LLVM-IR as the intermediate link between KCL and native/WASM code, KCL has the following three core stages:</p><ul><li>Translation from KCL AST to LLVM-IR: By traversing the KCL AST, the corresponding LLVM-IR code is generated according to the KCL language specification.</li><li>KCL runtime libraries provide runtime KCL value calculation, memory, context management, built-in library and plug-in library support.</li><li>Assembling, linking and execution.</li></ul><p>In addition, KCL provides enhanced support for semantic checkers and plugins:</p><ul><li>Resolver<ul><li>Static type inference and checking: type inference and checking can be performed at compile time to avoid the overhead of type check at runtime. It can be used as a good foundation for IDE and other semantic API support (such as schema model query, dependency analysis, etc.).</li><li>Configuration graph unification: build and merge the configuration data during the compilation process, and the merged data can be obtained through only a few calculations at runtime.</li><li>Schema-centric OOP: KCL language only retains the syntax of schema single inheritance. Besides, the schema can mix and reuse the same code fragments through mixin, protocol and other features.</li><li>Semantic dependency graph: KCL can complete the dependency analysis when configuration code changes.</li></ul></li><li>Plugin<ul><li>We can use Python/Go to write plugin libraries, which mainly include some domain capabilities, such as accessing networks or databases.</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="42-kcl-configuration-graph-model">4.2 KCL Configuration Graph Model<a class="hash-link" href="#42-kcl-configuration-graph-model" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="/assets/images/17-kcl-graph-unification-2210da55069341349429e2ff7c21c2aa.png" width="1770" height="886"></p><p>Fig. 17: KCL configuration graph model.</p><p>As shown in Fig. 17, the KCL code generates two graphs during the compilation process corresponding to the schema model definition and the declared configuration. The schema model definition includes references, inheritances, and composition relationships between models, and the configuration data declared on the user side are the model instantiation. The overall compilation process can be divided into three steps:</p><ol><li>Expand the model based on dependencies.</li><li>Merge different configuration codes.</li><li>Substitute the merged confguration into the platform model until all configuration attributes have certain values to obtain the final configuration.</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="5-summary">5. Summary<a class="hash-link" href="#5-summary" title="Direct link to heading">​</a></h2><p>The blog gives the landscape overview of declarative configuration technology, focusing on the KCL concept, core features, usage cases and comparison with other configuration languages, hoping to help you understand declarative configuration technology and KCL language. For more information about the concept, background and design of KCL, please visit <a href="https://kcl-lang.github.io/" target="_blank" rel="noopener noreferrer">https://kcl-lang.github.io/</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="6-reference">6. Reference<a class="hash-link" href="#6-reference" title="Direct link to heading">​</a></h2><ul><li>KusionStack Cloud Native Configuration Practice Blog: <a href="https://KusionStack.io/blog/2021-kusion-intro" target="_blank" rel="noopener noreferrer">https://KusionStack.io/blog/2021-kusion-intro</a></li><li>Terraform Language: <a href="https://www.terraform.io/language" target="_blank" rel="noopener noreferrer">https://www.terraform.io/language</a></li><li>Terraform Provider Kubernetes: <a href="https://github.com/hashicorp/terraform-provider-kubernetes" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-kubernetes</a></li><li>Terraform Provider AWS: <a href="https://github.com/hashicorp/terraform-provider-aws" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-aws</a></li><li>Pulumi: <a href="https://www.pulumi.com/docs/" target="_blank" rel="noopener noreferrer">https://www.pulumi.com/docs/</a></li><li>Pulumi vs. Terraform: <a href="https://www.pulumi.com/docs/intro/vs/terraform/" target="_blank" rel="noopener noreferrer">https://www.pulumi.com/docs/intro/vs/terraform/</a></li><li>Google SRE Work Book Configuration Design: <a href="https://sre.google/workbook/configuration-design/" target="_blank" rel="noopener noreferrer">https://sre.google/workbook/configuration-design/</a></li><li>Google Borg Paper: <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/43438.pdf" target="_blank" rel="noopener noreferrer">https://storage.googleapis.com/pub-tools-public-publication-data/pdf/43438.pdf</a></li><li>Holistic Configuration Management at Facebook: <a href="https://sigops.org/s/conferences/sosp/2015/current/2015-Monterey/printable/008-tang.pdf" target="_blank" rel="noopener noreferrer">https://sigops.org/s/conferences/sosp/2015/current/2015-Monterey/printable/008-tang.pdf</a></li><li>JSON Spec: <a href="https://www.json.org/json-en.html" target="_blank" rel="noopener noreferrer">https://www.json.org/json-en.html</a></li><li>YAML Spec: <a href="https://yaml.org/spec/" target="_blank" rel="noopener noreferrer">https://yaml.org/spec/</a></li><li>GCL: <a href="https://github.com/rix0rrr/gcl" target="_blank" rel="noopener noreferrer">https://github.com/rix0rrr/gcl</a></li><li>HCL: <a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/hcl</a></li><li>CUE: <a href="https://github.com/cue-lang/cue" target="_blank" rel="noopener noreferrer">https://github.com/cue-lang/cue</a></li><li>Jsonnet: <a href="https://github.com/google/jsonnet" target="_blank" rel="noopener noreferrer">https://github.com/google/jsonnet</a></li><li>Dhall: <a href="https://github.com/dhall-lang/dhall-lang" target="_blank" rel="noopener noreferrer">https://github.com/dhall-lang/dhall-lang</a></li><li>Thrift: <a href="https://github.com/Thriftpy/thriftpy2" target="_blank" rel="noopener noreferrer">https://github.com/Thriftpy/thriftpy2</a></li><li>Kustomize: <a href="https://kustomize.io/" target="_blank" rel="noopener noreferrer">https://kustomize.io/</a></li><li>Kube-linter: <a href="https://github.com/stackrox/kube-linter" target="_blank" rel="noopener noreferrer">https://github.com/stackrox/kube-linter</a></li><li>Checkov: <a href="https://github.com/bridgecrewio/checkov" target="_blank" rel="noopener noreferrer">https://github.com/bridgecrewio/checkov</a></li><li>KCL Documents: <a href="https://kcl-lang.github.io/docs/reference/lang/lang/tour" target="_blank" rel="noopener noreferrer">https://kcl-lang.github.io/docs/reference/lang/lang/tour</a></li><li>How Terraform Works: A Visual Intro: <a href="https://betterprogramming.pub/how-terraform-works-a-visual-intro-6328cddbe067" target="_blank" rel="noopener noreferrer">https://betterprogramming.pub/how-terraform-works-a-visual-intro-6328cddbe067</a> </li><li>How Terraform Works: Modules Illustrated: <a href="https://awstip.com/terraform-modules-illustrate-26cbc48be83a" target="_blank" rel="noopener noreferrer">https://awstip.com/terraform-modules-illustrate-26cbc48be83a</a></li><li>Helm: <a href="https://helm.sh/" target="_blank" rel="noopener noreferrer">https://helm.sh/</a></li><li>Helm vs. Kustomize: <a href="https://harness.io/blog/helm-vs-kustomize" target="_blank" rel="noopener noreferrer">https://harness.io/blog/helm-vs-kustomize</a></li><li>KubeVela: <a href="https://kubevela.io/docs/" target="_blank" rel="noopener noreferrer">https://kubevela.io/docs/</a></li></ul>]]></content>
        <author>
            <name>Pengfei, Xu</name>
        </author>
        <category label="KCL" term="KCL"/>
        <category label="Configuration" term="Configuration"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[KCL - Cloud Native Configuration and Policy Language]]></title>
        <id>2021-kcl-intro</id>
        <link href="https://kcl-lang.github.io/blog/2021-kcl-intro"/>
        <updated>2021-08-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog introduces the birth background, language characteristics, practical exploration and future development of KCL.]]></summary>
        <content type="html"><![CDATA[<p>This blog introduces the birth background, language characteristics, practical exploration and future development of KCL.</p><ul><li>Introduction：<a href="https://giac.msup.com.cn/course?id=15307" target="_blank" rel="noopener noreferrer">https://giac.msup.com.cn/course?id=15307</a></li><li>Content：<a href="https://segmentfault.com/a/1190000040455559" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000040455559</a></li><li><a href="https://gw.alipayobjects.com/os/bmw-prod/2cb0c283-5f24-485e-b635-b6efac887eba.pdf" target="_blank" rel="noopener noreferrer">PDF (Chinese)</a></li></ul><p><a href="https://gw.alipayobjects.com/os/bmw-prod/2cb0c283-5f24-485e-b635-b6efac887eba.pdf" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="KCL Talk Cover" src="/assets/images/talk-cover-7bff56b2738955e27cf16a5ebb1a4506.png" width="1820" height="1366"></a></p>]]></content>
        <author>
            <name>Shushan, Chai</name>
        </author>
        <category label="KCL" term="KCL"/>
    </entry>
</feed>